#!/Users/arsemag/CS4700_Net_Projects/transport-starter-code-main/.venv/bin/python3

import argparse, socket, time, json, select, struct, sys, math, copy


class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        # self.log("Bound to port %d" % self.port)
        self.received_sequences = set()
        self.back_burner = {}
        self.seq_number_counter = 0
        self.remote_host = None
        self.remote_port = None

    # def log(self, message):
    #     sys.stderr.write(message + "\n")
    #     sys.stderr.flush()

    def send(self, message):
        # self.log("Sent message %s" % json.dumps(message))
        if self.remote_host is not None and self.remote_port is not None:
            self.socket.sendto(json.dumps(message).encode("utf-8"), (self.remote_host, self.remote_port))

    def recv(self):
        data, addr = self.socket.recvfrom(65535)
        if self.remote_host is None:
            self.remote_host = addr[0]
            self.remote_port = addr[1]

        if addr != (self.remote_host, self.remote_port):
            # self.log("Error: Received response from unexpected remote; ignoring")
            return None
        else:
            decoded = data.decode("utf-8")
            # self.log("Received message %s" % decoded)
            return json.loads(decoded)

    def process_message(self, msg):
        self.send({"type": "ack", "seq": msg["seq"]})

        if msg["type"] == "msg":
            if msg["seq"] not in self.received_sequences:
                self.received_sequences.add(msg["seq"])
                self.handle_new_packet(msg)

    def handle_new_packet(self, msg):
        """
        Print packet data in order. If the received packet is exactly the one
        we expect (based on seq_number_counter), print it and then check for any
        stored (back burner) packets that can now be printed in order.
        """
        if msg["seq"] == self.seq_number_counter:
            print(msg["data"], end='', flush=True)
            self.seq_number_counter += 1
            # Check if subsequent packets arrived out-of-order.
            while self.seq_number_counter in self.back_burner:
                print(self.back_burner.pop(self.seq_number_counter), end='', flush=True)
                self.seq_number_counter += 1
        else:
            self.back_burner[msg["seq"]] = msg["data"]

    def run(self):
        while True:
            ready, _, _ = select.select([self.socket], [], [], 0.1)
            if ready:
                msg = self.recv()
                if msg is not None:
                    self.process_message(msg)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Receive data')
    args = parser.parse_args()
    receiver = Receiver()
    receiver.run()