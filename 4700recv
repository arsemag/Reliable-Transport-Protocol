#!/home/ctf-machine/PycharmProjects/transport-starter-code-main/.venv/bin/python3

import argparse, socket, time, json, select, struct, sys, math

class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)
        self.window_size = 2
        self.received_sequences = set()

        self.remote_host = None
        self.remote_port = None

    def send(self, message):
        self.log("Sent message %s" % json.dumps(message))
        self.socket.sendto(json.dumps(message).encode("utf-8"), (self.remote_host, self.remote_port))

    def recv(self, socket):
        data, addr = socket.recvfrom(65535)

        # Grab the remote host/port if we don't already have it
        if self.remote_host is None:
            self.remote_host = addr[0]
            self.remote_port = addr[1]

        # Make sure we're talking to the same remote host
        if addr != (self.remote_host, self.remote_port):
            self.log("Error:  Received response from unexpected remote; ignoring")
            return None
        else:
            self.log("Received message %s" % data.decode("utf-8"))
            return json.loads(data.decode("utf-8"))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                size = self.window_size
                for _ in range(size):
                    msg = self.recv(conn)

                    print(f"DEBUG BEFORE: received sequences: {self.received_sequences}, msg sequence: {msg['seq']}", file=sys.stderr)
                    if msg["seq"] not in self.received_sequences:
                        self.received_sequences.add(msg["seq"])
                        print(
                            f"DEBUG AFTER: received sequences: {self.received_sequences}, msg sequence: {msg['seq']}",
                            file=sys.stderr)
                        # Print out the data to stdout
                        print(msg["data"], end='', flush=True)

                        if msg["seq"] % 2 == 1:
                            # Always send back an ack
                            self.send({ "type": "ack", "seq": msg["seq"] })

                    else:
                        size += 1

        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()