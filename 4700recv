#!/home/ctf-machine/PycharmProjects/transport-starter-code-main/.venv/bin/python3

import argparse, socket, time, json, select, struct, sys, math

class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)
        self.window_size = 1
        self.received_sequences = set()

        #Try to get test 1 - 3 to all pass
        self.received_packet_of_current_window = set()
        self.what_we_want = set()
        self.where_are_we =  0
        self.back_burner = {}
        self.seq_number_counter = 0
        self.increase_window_size_counter = 0

        self.remote_host = None
        self.remote_port = None

    def send(self, message):
        self.log("Sent message %s" % json.dumps(message))
        self.socket.sendto(json.dumps(message).encode("utf-8"), (self.remote_host, self.remote_port))

    def recv(self, socket):
        data, addr = socket.recvfrom(65535)
        # print(f"DEBUG: received {data}", file=sys.stderr)

        # Grab the remote host/port if we don't already have it
        if self.remote_host is None:
            self.remote_host = addr[0]
            self.remote_port = addr[1]

        # Make sure we're talking to the same remote host
        if addr != (self.remote_host, self.remote_port):
            self.log("Error:  Received response from unexpected remote; ignoring")
            return None
        else:
            self.log("Received message %s" % data.decode("utf-8"))
            return json.loads(data.decode("utf-8"))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def run(self):
        while True:
            # socks = select.select([self.socket], [], [], .1)[0]
            # for conn in socks:
            for _ in range(self.window_size):
                # print(f"DEBUG: right before recv", file=sys.stderr)
                msg = self.recv(self.socket)
                print(f"DEBUG msg={msg}", file=sys.stderr)
                if msg["seq"] not in self.received_sequences:
                    self.received_sequences.add(msg["seq"])
                    self.received_packet_of_current_window.add(msg["seq"])
                    self.send({"type": "ack", "seq": msg["seq"]})

                    if self.increase_window_size_counter == self.window_size - 1:
                        self.window_size += 1
                        self.increase_window_size_counter = 0
                        # print(f"DEBUG: seq_counter={self.seq_number_counter} window_size={self.window_size}", file=sys.stderr)
                    else:
                        self.increase_window_size_counter += 1

                    def jitter():
                        if self.seq_number_counter == msg["seq"]:
                            print(msg["data"], end='', flush=True)
                            self.seq_number_counter += 1
                            jitter()
                        elif self.seq_number_counter in self.back_burner.keys():
                            print(self.back_burner[self.seq_number_counter], end='', flush=True)
                            self.seq_number_counter += 1
                            jitter()
                        else:
                            self.back_burner[msg["seq"]] = msg["data"]

                    jitter()

            for i in range(self.where_are_we, self.where_are_we + self.window_size):
                self.what_we_want.add(i)


            if len(self.received_packet_of_current_window) != self.window_size:
                self.send({"type": "nack", "seq": min(self.received_sequences)})

                # max_sequence_received =  max(self.received_sequences)
                # if max_sequence_received % self.window_size == self.window_size - 1 and len(self.received_sequences) % self.window_size == 0:
                #     self.send({"type": "ack", "seq": max(self.received_sequences)})
        return


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()