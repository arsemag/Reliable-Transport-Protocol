#!/Users/arsemag/CS4700_Net_Projects/transport-starter-code-main/.venv/bin/python3
import argparse, socket, time, json, select, struct, sys, math

DATA_SIZE = 1375

class Sender:
    def __init__(self, host, port):
        self.host = host
        self.port = int(port)
        self.log("Sender starting up using port %s" % self.port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False
        self.window_size = 2 #TODO maybe change this later
        self.messages = []

        self.remote_host = None
        self.remote_port = None

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        self.log("Sending message '%s'" % json.dumps(message))
        self.socket.sendto(json.dumps(message).encode("utf-8"), (self.host, self.port))

    def recv(self, socket):
        data, addr = socket.recvfrom(65535)
        print("Received THIS: %s" % data)

        # Grab the remote host/port if we don't already have it
        if self.remote_host is None:
            self.remote_host = addr[0]
            self.remote_port = addr[1]

        # Make sure we're talking to the same remote host
        if addr != (self.remote_host, self.remote_port):
            self.log("Error:  Received response from unexpected remote; ignoring")
            return None
        else:
            self.log("Received message %s" % data)
            return json.loads(data.decode("utf-8"))


    def run(self):
        is_data_left = True
        seq = 0
        acked = []
        fake_data = True
        info_2 = sys.stdin.read()
        print(f"this is the info 2 is {info_2}", file=sys.stderr)


        while fake_data:
            info = sys.stdin.read(DATA_SIZE)
            if len(info) == 0:
                fake_data = False
            else:
                msg = {"type": "msg", "data": info, "seq": seq}
                seq += 1
                self.messages.append(msg)

        print(f"this is the message: {self.messages}", file=sys.stderr)

        while is_data_left:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]
            socks = select.select(sockets, [], [], 0.1)[0]

            for conn in socks:
                if conn == self.socket:
                    data = self.recv(conn)
                    acked.append(data["seq"])
                    if len(acked) == seq:
                        self.waiting = False
                if not fake_data:
                    for msg_num in range(len(self.messages)):
                        if not self.waiting:
                            for i in range(self.window_size):
                                self.send(self.messages[msg_num + i])

                            self.waiting = True
                            msg_num += self.window_size
                        else:
                            break








        sys.exit(0)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()