#!/home/ctf-machine/PycharmProjects/transport-starter-code-main/.venv/bin/python3

import argparse, socket, time, json, select, struct, sys, math

DATA_SIZE = 1375

class Sender:
    def __init__(self, host, port):
        self.host = host
        self.port = int(port)
        self.log("Sender starting up using port %s" % self.port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False
        self.window_size = 2 #TODO maybe change this later

        self.remote_host = None
        self.remote_port = None

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        self.log("Sending message '%s'" % json.dumps(message))
        self.socket.sendto(json.dumps(message).encode("utf-8"), (self.host, self.port))

    def recv(self, socket):
        data, addr = socket.recvfrom(65535)

        # Grab the remote host/port if we don't already have it
        if self.remote_host is None:
            self.remote_host = addr[0]
            self.remote_port = addr[1]

        # Make sure we're talking to the same remote host
        if addr != (self.remote_host, self.remote_port):
            self.log("Error:  Received response from unexpected remote; ignoring")
            return None
        else:
            self.log("Received message %s" % data)
            return json.loads(data.decode("utf-8"))

    def clear_socket_buffer(sock):
        try:
            while True:
                data = sock.recv(1024)
                if not data:
                    break
        except socket.error:
            pass

    def run(self):
        is_data_left = True
        seq = 0
        acked_packets = set()

        while is_data_left or self.waiting:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]
            socks = select.select(sockets, [], [], 0.1)[0]

            for conn in socks:
                print(f"DEBUG: self.socket: {self.socket}", sys.stderr), conn
                if conn == self.socket:
                    data = self.recv(conn)
                    print(f"DEBUG: data: {data}", sys.stderr), conn
                    if data and data.get("type") == "ack":
                        acked_packets.add(data["seq"])
                        print(f"DEBUG: len of ack set: {acked_packets}", sys.stderr)
                        if len(acked_packets) == seq:
                            self.waiting = False
                elif conn == sys.stdin and is_data_left:
                    for _ in range(self.window_size):
                        data = sys.stdin.read(DATA_SIZE)
                        if len(data) == 0:
                            is_data_left = False
                            break

                        msg = {"type": "msg", "data": data, "seq": seq}
                        seq += 1
                        self.send(msg)
                    self.waiting = True

        sys.exit(0)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()