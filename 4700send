#!/home/ctf-machine/PycharmProjects/transport-starter-code-main/.venv/bin/python3
import argparse, socket, time, json, select, struct, sys, math

DATA_SIZE = 1375


class Sender:
    def __init__(self, host, port):
        self.host = host
        self.port = int(port)
        self.log("Sender starting up using port %s" % self.port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False
        self.window_size = 1
        self.acknowledged_packet = set()
        self.sent_out_packets = set()
        self.change_window_counter = 0

        self.remote_host = None
        self.remote_port = None

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        self.log("Sending message '%s'" % json.dumps(message))
        self.socket.sendto(json.dumps(message).encode("utf-8"), (self.host, self.port))

    def recv(self, socket):
        data, addr = socket.recvfrom(65535)

        # Grab the remote host/port if we don't already have it
        if self.remote_host is None:
            self.remote_host = addr[0]
            self.remote_port = addr[1]

        # Make sure we're talking to the same remote host
        if addr != (self.remote_host, self.remote_port):
            self.log("Error:  Received response from unexpected remote; ignoring")
            return None
        else:
            self.log("Received message %s" % data)
            return json.loads(data.decode("utf-8"))

    def run(self):
        seq = 0
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]

            socks = select.select(sockets, [], [], 0.1)[0]
            size = self.window_size
            # print("DEBUG window_size: %s" % size, file=sys.stderr)
            for conn in socks:
                if conn == self.socket:
                    i = 0
                    while i < size:
                        # print(f"DEBUG: this is the size {size}", file=sys.stderr)
                        if len(self.sent_out_packets) == 0:
                            self.log("All done!")
                            sys.exit(0)
                        data = self.recv(conn)
                        if data['seq'] not in self.acknowledged_packet:
                            self.acknowledged_packet.add(data['seq'])
                            # print(f"DEBUG: this is acknowledged packets {self.acknowledged_packet}", file=sys.stderr)
                            self.sent_out_packets = self.sent_out_packets - self.acknowledged_packet
                            self.waiting = False
                            if self.change_window_counter == self.window_size - 1:
                                self.window_size += 1
                                self.change_window_counter = 0
                                # print(f"DEBUG window_size: {self.window_size} and change_window_counter: {self.change_window_counter}", file=sys.stderr)
                            else:
                                self.change_window_counter += 1
                        else:
                            size += 1
                            # print("DEBUG: WINDOW_SIZE: %s" % size, file=sys.stderr)
                        i += 1

                elif conn == sys.stdin:
                    for _ in range(self.window_size):
                        data = sys.stdin.read(DATA_SIZE)
                        if len(data) != 0:
                            msg = {"type": "msg", "data": data, "seq": seq}
                            self.sent_out_packets.add(seq)
                            self.send(msg)

                        # msg = {"type": "msg", "data": data, "seq": seq}
                        # self.sent_out_packets.add(seq)
                        if len(self.sent_out_packets) == 0:
                            self.log("All done!")
                            sys.exit(0)

                        self.waiting = True
                        seq += 1
        return


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
